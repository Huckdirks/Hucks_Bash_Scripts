#!/bin/bash

if [[ "$#" -lt 2 ]]; then
  echo "Usage: find_replace FIND_WORD REPLACE_WORD [-r REGEX_PATTERN] [SEARCH_DIR]"
  echo "Search for files with the word FIND_WORD in their names and replace it with REPLACE_WORD."
  echo "Options:"
  echo "  -r REGEX_PATTERN  Use REGEX_PATTERN as a regex pattern to search for files."
  echo "  SEARCH_DIR        The directory to search in, default to current directory if not provided."
  exit 1
fi


# Word to find in file names, treated as a regex pattern
FIND_WORD=$1
# Word to replace with
REPLACE_WORD=$2

SHIFT_NUM=2

# Check if the -r option is present
if [[ "$3" == "-r" ]]; then
  REGEX_PLACEHOLDER="$4"
  # Replace the placeholder $1 in the regex pattern with the actual $1 argument value
  REGEX_PATTERN=$(echo "$REGEX_PLACEHOLDER" | sed "s/\$1/$FIND_WORD/g")
  SEARCH_DIR="${5:-$PWD}" # Default to current directory if not provided
  SHIFT_NUM=4
else
  # If no -r is present, use $1 directly as part of the REGEX_PATTERN
  REGEX_PATTERN="$FIND_WORD"
  SEARCH_DIR="${3:-$PWD}" # Default to current directory if not provided
fi

# Ensure all the initial arguments are processed before running the main command
shift "$SHIFT_NUM"

fd $REGEX_PATTERN $SEARCH_DIR | while read -r FILE; do
    NEW_FILE=$(echo "$FILE" | sed "s/$FIND_WORD/$REPLACE_WORD/g")

    echo "Original: $FILE -> New: $NEW_FILE"
    mv "$FILE" "$NEW_FILE"
done
